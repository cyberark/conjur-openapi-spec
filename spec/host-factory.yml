components:
  schemas:
    CreateHost:
      description: Contains information about a created host
      type: object
      properties:
        created_at:
          type: string
        id:
          type: string
        owner:
          type: string
        permissions:
          type: array
          items:
            type: string
        annotations:
          type: array
          items:
            type: string
        api_key:
          type: string
      required:
        - created_at
        - id
        - api_key
        - owner
        - permissions
        - annotations
      example:
        {
          "created_at": "2017-08-07T22:30:00.145+00:00",
          "id": "myorg:host:brand-new-host",
          "owner": "myorg:host_factory:hf-db",
          "permissions": [],
          "annotations": [],
          "api_key": "rq5bk73nwjnm52zdj87993ezmvx3m75k3whwxszekvmnwdqek0r"
        }

    TokenValue:
      type: string
      example: "2c0vfj61pmah3efbgpcz2x9vzcy1ycskfkyqy0kgk1fv014880f4"

    CreateHostTokenForm:
      type: object
      properties:
        expiration:
          description: "`ISO 8601 datetime` denoting a requested expiration time."
          type: string
          example: "2017-08-04T22:27:20+00:00"

        host_factory:
          description: "Fully qualified host factory ID"
          type: string
          example: "myorg:host_factory:hf-db"

        count:
          description: "Number of host tokens to create"
          type: integer
          example: 2

        cidr:
          # TODO: Find out if we accept string or an array
          description: "Number of host tokens to create"
          type: array
          items:
            type: string
          example: ["127.0.0.1/32"]

      required:
        - expiration
        - host_factory

      example:
        {
          "expiration": "2017-08-04T22:27:20+00:00",
          "host_factory": "myorg:hosty_factory:hf-db"
        }

    CreateHostForm:
      type: object
      properties:
        id:
          description: "Identifier of the host to be created. It will be created within the account of the host factory."
          type: string
          example: "my-new-host"

        annotations:
          description: "Annotations to apply to the new host"
          type: object
          example: {"puppet": "true", "description": "new db host"}

      required:
        - id
      example:
        {
          "id": "new-host"
        }

    CreateHostToken:
      type: array
      items:
        type: object
        properties:
          expiration:
            type: string
          cidr:
            type: array
            items:
              type: string
          token:
            type: string
        required:
          - expiration
          - cidr
          - token
      example:
        [
          {
            "expiration": "2017-08-04T22:27:20+00:00",
            "cidr": [
              "127.0.0.1/32",
              "127.0.0.2/32"
            ],
            "token": "281s2ag1g8s7gd2ezf6td3d619b52t9gaak3w8rj0p38124n384sq7x"
          },
          {
            "expiration": "2017-08-04T22:27:20+00:00",
            "cidr": [
              "127.0.0.1/32",
              "127.0.0.2/32"
            ],
            "token": "2c0vfj61pmah3efbgpcz2x9vzcy1ycskfkyqy0kgk1fv014880f4"
          }
        ]

  responses:
    CreateHost:
      description: "The response body contains the newly-created host"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CreateHost"

    CreateHostToken:
      description: "Zero or more tokens were created and delivered in the response body"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateHostToken'

  paths:
    CreateHostToken:
      parameters:
        - $ref: 'openapi.yml#/components/parameters/RequestID'
      post:
        tags:
        - "host factory"
        summary: "Creates one or more host identity tokens."
        description: |
          Creates one or more tokens which can be used to bootstrap host identity. Responds with a JSON document containing the tokens and their restrictions.

          If the tokens are created with a CIDR restriction, Conjur will only accept them from the whitelisted IP ranges.

          ##### Permissions required
          #
          `execute` privilege on the Host Factory."
        operationId: "createToken"
        requestBody:
          description: "Parameters"
          required: true
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/CreateHostTokenForm'

        responses:
          "200":
            $ref: '#/components/responses/CreateHostToken'
          "401":
            $ref: 'openapi.yml#/components/responses/UnauthorizedError'
          "403":
            $ref: 'openapi.yml#/components/responses/InadequatePrivileges'
          "404":
            $ref: 'openapi.yml#/components/responses/ResourceNotFound'
          "422":
            $ref: 'openapi.yml#/components/responses/UnprocessableEntity'

        security:
          - conjurAuth: []

    RevokeHostToken:
      parameters:
        - $ref: 'openapi.yml#/components/parameters/RequestID'
      delete:
        tags:
        - "host factory"
        summary: "Revokes a token, immediately disabling it."
        description: |
          Revokes a token, immediately disabling it.

          ##### Permissions required

          `update` privilege on the host factory."
        operationId: "revokeToken"
        parameters:
        - name: "token"
          in: "path"
          description: "The host factory token to revoke"
          required: true
          schema:
            $ref: '#/components/schemas/TokenValue'

        responses:
          "204":
            description: "Token was successfully revoked"
          "400":
            $ref: 'openapi.yml#/components/responses/BadRequest'
          "401":
            $ref: 'openapi.yml#/components/responses/UnauthorizedError'
          "404":
            $ref: 'openapi.yml#/components/responses/ResourceNotFound'

        security:
          - conjurAuth: []

    CreateHost:
      parameters:
        - $ref: 'openapi.yml#/components/parameters/RequestID'
      post:
        tags:
        - "host factory"
        summary: "Creates a Host using the Host Factory."
        description: |
          Creates a Host using the Host Factory and returns a JSON description of it.

          Requires a host factory token, which can be created using the create tokens API.
          In practice, this token is usually provided automatically as part of Conjur integration with your
          host provisioning infrastructure.

          Note: If the token was created with a CIDR restriction, you must make this API request from a whitelisted address.
        operationId: "createHost"
        requestBody:
          description: "Parameters"
          required: true
          content:
            application/x-www-form-urlencoded:
              schema:
                $ref: '#/components/schemas/CreateHostForm'

        responses:
          "201":
            $ref: '#/components/responses/CreateHost'
          "401":
            $ref: 'openapi.yml#/components/responses/UnauthorizedError'
          "422":
            $ref: 'openapi.yml#/components/responses/UnprocessableEntity'

        security:
          - conjurAuth: []
