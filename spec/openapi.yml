openapi: "3.0.0"

info:
  description: "This is an API definition for CyberArk DAP (part of AAM) and Conjur OSS v10+. You can find out more at [Conjur](https://www.conjur.org/) and [AAM](https://www.cyberark.com/products/privileged-account-security-solution/application-access-manager/) pages."
  version: "0.0.1"
  title: "Conjur"
  contact:
    email: "conj_maintainers@cyberark.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

tags:
- name: "authn"
  description: "Authentication"
- name: "secrets"
  description: "Secrets"
- name: "policies"
  description: "Policies"
- name: "roles"
  description: "RBAC"
- name: "host factory"
  description: "Host factories"
- name: "public keys"
  description: "SSH keys"
- name: "resources"
  description: "Resources"
  
components:
  schemas:
    ApiKey:
      type: string
      minLength: 55
      description: "Example of a Conjur API key"
      example: "14m9cf91wfsesv1kkhevg12cdywm2wvqy6s8sk53z1ngtazp1t9tykc"

    AccountName:
      type: string
      minLength: 1
      example: "myorg"

    CheckPrivilege:
      type: boolean
      example: true
      description: "Checks whether a role has a privilege on a resource."

    Count:
      description: "Return only the count of results"
      type: boolean
      example: true

    Kind:
      type: string
      minLength: 1
      example: "variable"

    Limit:
      description: "Return no more than this number of results"
      type: integer
      example: 10

    Offset:
      description: "Skips this many items before returning the rest"
      type: integer
      example: 20

    PermittedRoles:
      type: boolean
      example: true

    Policy:
      type: string
      minLength: 1
      example: |
        - !policy
          id: database
          body:
          - !host
            id: db-host
          - !variable
            id: db-password
            owner: !host db-host

    PrivilegeLevel:
      type: string
      minLength: 1
      example: "execute"
      description: "Denotes a type of permission allowed on a resource"

    ResourceID:
      type: string
      minLength: 1
      example: "prod%2Faws%2Fdb-password"
      description: "Resource identifier. Requires to be encoded when in path.

        ##### Examples:

        - `myapp-01` -> `myapp-01` (unchanged)

        - `alice@devops` -> `alice%40devops`

        - `prod/aws/db-password` -> `prod%2Faws%2Fdb-password`

        - `research+development` -> `research%2Bdevelopment`

        - `sales&marketing` -> `sales%26marketing`"

    ResourceVersion:
      description: "Version of the resource (Conjur keeps the last 20 versions of a secret)"
      type: integer

    Role:
      type: string
      minLength: 1
      description: "##### Kinds of roles:

        - User: one unique wonderful human

        - Host: a single logical machine (in the broad sense, not just physical)

        - Layer: a collection of hosts that have the same privileges

        - Group: a collection of users and groups that have the same privileges
 
        - Policy: a role which owns of a set of related object


        Any identifier included in the URL must be URL-encoded to be recognized by the Conjur API.

        ##### Resource Identifiers:

        - `myapp-01` -> `myapp-01` (unchanged)

        - `alice@devops` -> `alice%40devops`

        - `prod/aws/db-password` -> `prod%2Faws%2Fdb-password`

        - `research+development` -> `research%2Bdevelopment`

        - `sales&marketing` -> `sales%26marketing`"

  responses:
    AccessTokenGeneric:
      description: |
        This response schema is a generic string as opposed to the AccessToken component schema.
        This is to allow users to use the "Accept-Encoding: base64" header in order to 
        receive a pre-encoded token instead of a JSON object.
      content:
        text/plain:
          schema:
            type: string
    ApiKey:
      description: "The response body is the API key"
      content:
        text/plain:
          schema:
            type: string
            example: '14m9cf91wfsesv1kkhevg12cdywm2wvqy6s8sk53z1ngtazp1t9tykc'
    BadRequest:
      description: "The server cannot process the request due to malformed request syntax"
    Busy:
      description: "Similar operation already in progress, retry after a delay"
    InadequatePrivileges:
      description: "The authenticated user lacks the necessary privileges"
    InternalServerError:
      description: "Malfromed request, rejected by the server"
    LoadedPolicy:
      description: "Decsribes new data created by a successful policy load"
      content:
        application/json:
          schema:
            type: object
            example:
              {
                "created_roles": {
                  "myorg:host:database/db-host": {
                    "id": "myorg:host:database/db-host",
                    "api_key": "309yzpa1n5kp932waxw6d37x4hew2x8ve8w11m8xn92acfy672m929en"
                  }
                },
                "version": 1
              }
    PermissionCheckSuccess:
      description: "Permissions check was successful"
    PublicKeys:
      description: "Public keys for a resource as newline delimited string for compatibility with the authorized_keys SSH format. Empty string if the resource does not exist"
      content:
        text/plain:
          schema:
            type: string
    ResourceNotFound:
      description: "The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set"
    ResourcesNotFound:
      description: "At least one resource was unable to be found"
    SecretValue:
      description: "The secret value was added successfully"
      content:
        text/plain:
          schema:
            type: string
            example: 'supersecret'
    # There might be a better way to display the schema of SecretBatchValue however the json keys are dynamic depending on the secrets you fetched in the 'secrets_id' query param.
    SecretBatchValue:
      description: "The batch secret values"
      content:
        application/json:
          schema:
            type: object
            example:
              {
                 "myorg:variable:secret1": "secret1Value",
                 "myorg:variable:secret2": "secret2Value"
              }
    UnauthorizedError:
      description: "Authentication information is missing or invalid"
    UnprocessableEntity:
      description: "A request parameter was either missing or invalid."

  securitySchemes:
    basicAuth:
      description: "Basic authentication"
      type: http
      scheme: basic
    conjurAuth:
      description: "Conjur access token in `Token token=<base64_encoded_token>` format"
      type: apiKey
      in: header
      name: Authorization

security:
  - basicAuth: []
  - conjurAuth: []
  
paths:
  '/authn/{account}/login':
    $ref: 'authentication.yaml#/components/paths/Login'

  '/authn/{account}/{login}/authenticate':
    $ref: 'authentication.yaml#/components/paths/Authenticate'

  '/authn/{account}/password':
    $ref: 'authentication.yaml#/components/paths/ChangePassword'

  '/authn/{account}/api_key':
    $ref: 'authentication.yaml#/components/paths/RotateApiKey'

# ========== SECRETS ==========

  '/secrets/{account}/{kind}/{identifier}':
    $ref: 'secrets.yml#/components/paths/SingleSecret'

  '/secrets':
    $ref: 'secrets.yml#/components/paths/BatchSecrets'

# ========== POLICIES ==========

  '/policies/{account}/policy/{identifier}':
    $ref: 'policies.yml#/components/paths/Policies'

# ========== Roles ==========

  '/roles/{account}/{kind}/{identifier}':
    get:
      tags:
      - "roles"
      summary: "Get role information"
      description: "Gets detailed information about a specific role, including the role members.


        If a role A is granted to a role B, then role A is said to have role B as a member. These relationships are described in the “members” portion of the returned JSON.


        ##### Listing members


        If `members` is provided, you will get the members of a role.


        If a `kind` query parameter is given, narrows results to only resources of that kind.


        If a `limit` is given, returns no more than that number of results. Providing an `offset` skips a number of resources before returning the rest. In addition, providing an `offset` will give limit a default value of 10 if none other is provided. These two parameters can be combined to page through results.


        If the parameter `count` is true, returns only the number of items in the list.


        ##### Text search


        If the search parameter is provided, narrows results to those pertaining to the search query. Search works across resource IDs and the values of annotations. It weights results so that those with matching id or a matching value of an annotation called name appear first, then those with another matching annotation value, and finally those with a matching kind.
        "
      operationId: "getRole"
      parameters:
      - name: "account"
        in: "path"
        description: "Organization account name"
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
      - name: "kind"
        in: "path"
        description: "Type of resource"
        required: true
        example: user
        schema:
          $ref: '#/components/schemas/Kind'
      - name: "identifier"
        in: "path"
        description: "ID of the role for which to get the information about"
        required: true
        example: "admin"
        schema:
          $ref: '#/components/schemas/ResourceID'
      - name: "members"
        in: "query"
        description: "Comma-delimited, URL-encoded resource IDs of the variables."
        schema:
          type: boolean
          example: false
      - name: "offset"
        in: "query"
        description: "When listing members, start at this item number."
        schema:
          $ref: '#/components/schemas/Offset'
      - name: "limit"
        in: "query"
        description: "When listing members, return up to this many results."
        schema:
          $ref: '#/components/schemas/Limit'
      - name: "count"
        in: "query"
        description: "When listing members, if `true`, return only the count of members."
        schema:
          $ref: '#/components/schemas/Count'

      responses:
        "201":
          description: "The response body contains the requested role(s)/member(s)"
          content:
            application/json:
              schema:
                type: object
        "400":
          $ref: '#/components/responses/BadRequest'
        "401":
          $ref: '#/components/responses/UnauthorizedError'
        "403":
          $ref: '#/components/responses/InadequatePrivileges'
        "404":
          $ref: '#/components/responses/ResourceNotFound'
        "500":
          $ref: '#/components/responses/InternalServerError'

      security:
        - conjurAuth: []

# ========== Resources ==========

  '/resources/{account}':
    $ref: 'resources.yml#/components/paths/ListResources'

  '/resources/{account}/{kind}/{identifier}':
    $ref: 'resources.yml#/components/paths/SingleResource'

# ========== Host Factory ==========

  '/host_factory_tokens':
    $ref: 'host-factory.yml#/components/paths/CreateHostToken'

  '/host_factory_tokens/{token}':
    $ref: 'host-factory.yml#/components/paths/RevokeHostToken'

  '/host_factories/hosts':
    $ref: 'host-factory.yml#/components/paths/CreateHost'

# ========== Public keys ==========

  '/public_keys/{account}/{kind}/{identifier}':
    get:
      tags:
      - "public keys"
      summary: "Shows all public keys for a resource."
      description: "Shows all public keys for a resource as newline delimited string for compatibility with the authorized_keys SSH format.


        Returns an empty string if the resource does not exist, to prevent attackers from determining whether a resource exists."
      operationId: "showPublicKeys"
      parameters:
      - name: "account"
        in: "path"
        description: "Organization account name"
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
      - name: "kind"
        in: "path"
        description: "Type of resource"
        required: true
        example: user
        schema:
          $ref: '#/components/schemas/Kind'
      - name: "identifier"
        in: "path"
        description: "ID of the resource for which to get the information about"
        required: true
        example: "admin"
        schema:
          $ref: '#/components/schemas/ResourceID'

      responses:
        "200":
          $ref: '#/components/responses/PublicKeys'
        "400":
          $ref: '#/components/responses/BadRequest'
        "404":
          $ref: '#/components/responses/ResourceNotFound'
        "422":
          $ref: '#/components/responses/UnprocessableEntity'
        "500":
          $ref: '#/components/responses/InternalServerError'

# TODO: Inject client cert
# TODO: Seed Service

externalDocs:
  description: "Find out more about Conjur"
  url: "https://conjur.org"
