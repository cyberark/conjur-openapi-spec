components:
  schemas:
    ResourceIDs:
      type: string
      example: myorg:variable:secret1,myorg:variable:secret1
      description: |
        Comma-delimited, URL-encoded resource identifiers.

        ##### Resources IDs encoding:

        - `myapp-01` -> `myapp-01` (unchanged)
        - `alice@devops` -> `alice%40devops`
        - `prod/aws/db-password` -> `prod%2Faws%2Fdb-password`
        - `research+development` -> `research%2Bdevelopment`
        - `sales&marketing` -> `sales%26marketing`

    Secret:
      type: string
      example: "supersecret"

  responses:
    # There might be a better way to display the schema of SecretBatchValue however the json keys are dynamic depending on the secrets you fetched in the 'secrets_id' query param.
    GetSecrets:
      description: "The batch secret values"
      content:
        application/json:
          schema:
            type: object
            example:
              {
                 "myorg:variable:secret1": "secret1Value",
                 "myorg:variable:secret2": "secret2Value"
              }

    GetSecret:
      description: "The secret value was added successfully"
      content:
        text/plain:
          schema:
            $ref: '#/components/schemas/Secret'

  paths:
    Secret:
      parameters:
        - $ref: 'openapi.yml#/components/parameters/RequestID'
      post:
        tags:
        - "secrets"
        summary: "Creates a secret value within the specified variable."
        description: |
          Creates a secret value within the specified Secret.


          Note: Conjur will allow you to add a secret to any resource, but the
          best practice is to store and retrieve secret data only using Secret resources.
        operationId: "createSecret"
        parameters:
        - name: "account"
          in: "path"
          description: "Organization account name"
          required: true
          schema:
            $ref: 'openapi.yml#/components/schemas/AccountName'
        - name: "kind"
          in: "path"
          description: "Type of resource - in almost all cases this should be `variable`"
          required: true
          schema:
            $ref: 'openapi.yml#/components/schemas/Kind'
        - name: "identifier"
          in: "path"
          description: "URL-encoded variable ID"
          required: true
          schema:
            $ref: 'openapi.yml#/components/schemas/ResourceID'
        - name: "expirations"
          in: "query"
          description: "Tells the server to reset the variables expiration date"
          required: false
          schema:
            type: string
        requestBody:
          description: "Secret data"
          required: false
          content:
            application/octet-stream:
              schema:
                type: string

        responses:
          "201":
            description: "The secret value was added successfully"
          "400":
            $ref: 'openapi.yml#/components/responses/BadRequest'
          "401":
            $ref: 'openapi.yml#/components/responses/UnauthorizedError'
          "403":
            $ref: 'openapi.yml#/components/responses/InadequatePrivileges'
          "422":
            $ref: 'openapi.yml#/components/responses/UnprocessableEntity'

        security:
          - conjurAuth: []

      get:
        tags:
        - "secrets"
        summary: "Fetches the value of a secret from the specified Secret."
        description: |
          Fetches the value of a secret from the specified Secret. The latest version
          will be retrieved unless the version parameter is specified. The twenty most recent secret versions are retained.

          The secret data is returned in the response body.

          Note: Conjur will allow you to add a secret to any resource, but the best practice is to store
          and retrieve secret data only using Secret resources.
        operationId: "getSecret"
        parameters:
        - name: "account"
          in: "path"
          description: "Organization account name"
          required: true
          schema:
            $ref: 'openapi.yml#/components/schemas/AccountName'
        - name: "kind"
          in: "path"
          description: "Type of resource - in almost all cases this should be `variable`"
          required: true
          schema:
            $ref: 'openapi.yml#/components/schemas/Kind'
        - name: "identifier"
          in: "path"
          description: "URL-encoded variable ID"
          required: true
          schema:
            $ref: 'openapi.yml#/components/schemas/ResourceID'
        - name: "version"
          in: "query"
          description: "(**Optional**) Version you want to retrieve (Conjur keeps the last 20 versions of a secret)"
          schema:
            $ref: 'openapi.yml#/components/schemas/ResourceVersion'

        responses:
          "200":
            $ref: '#/components/responses/GetSecret'
          "400":
            $ref: 'openapi.yml#/components/responses/BadRequest'
          "401":
            $ref: 'openapi.yml#/components/responses/UnauthorizedError'
          "403":
            $ref: 'openapi.yml#/components/responses/InadequatePrivileges'
          "404":
            $ref: 'openapi.yml#/components/responses/ResourceNotFound'
          "422":
            $ref: 'openapi.yml#/components/responses/UnprocessableEntity'

        security:
          - conjurAuth: []

    BatchSecrets:
      parameters:
        - $ref: 'openapi.yml#/components/parameters/RequestID'
      get:
        tags:
        - "secrets"
        summary: "Fetch multiple secrets"
        description: "Fetches multiple secret values in one invocation. Itâ€™s faster to fetch secrets in batches than to fetch them one at a time."
        operationId: "getSecrets"
        parameters:
        - name: "variable_ids"
          in: "query"
          description: "Comma-delimited, URL-encoded resource IDs of the variables."
          required: true
          schema:
            $ref: '#/components/schemas/ResourceIDs'
        - name: Accept-Encoding
          in: header
          description: "Set the encoding of the response object"
          schema:
            type: string
            enum: [ base64 ]

        responses:
          "200":
            $ref: '#/components/responses/GetSecrets'
          "401":
            $ref: 'openapi.yml#/components/responses/UnauthorizedError'
          "403":
            $ref: 'openapi.yml#/components/responses/InadequatePrivileges'
          "404":
            $ref: 'openapi.yml#/components/responses/ResourcesNotFound'
          "406":
            description: Issue encoding secret into JSON format
            content:
              application/json:
                schema:
                  type: object
          "422":
            $ref: 'openapi.yml#/components/responses/UnprocessableEntity'

        security:
          - conjurAuth: []
