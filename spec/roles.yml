components:
  responses:
    Roles:
      description: "The response body contains the requested role(s)/member(s)"
      content:
        application/json:
          schema:
            type: object
            example:
              {
                "created_at": "2020-12-31:12:34:56.789+00:00",
                "id": "myorg:user:admin",
                "members": []
              }

  paths:
    Roles:
      parameters:
        - $ref: 'openapi.yml#/components/parameters/RequestID'
      get:
        tags:
        - "roles"
        summary: "Get role information"
        description: |
          Gets detailed information about a specific role, including the role members.

          If a role A is granted to a role B, then role A is said to have role B as a member.
          These relationships are described in the “members” portion of the returned JSON.

          ##### Listing members

          If `members` is provided, you will get the members of a role.

          If a `kind` query parameter is given, narrows results to only resources of that kind.

          If a `limit` is given, returns no more than that number of results. Providing an `offset`
          skips a number of resources before returning the rest. In addition, providing an `offset`
          will give limit a default value of 10 if none other is provided. These two parameters
          can be combined to page through results.

          If the parameter `count` is true, returns only the number of items in the list.

          ##### Text search

          If the search parameter is provided, narrows results to those pertaining to the search query.
          Search works across resource IDs and the values of annotations. It weights results so that
          those with matching id or a matching value of an annotation called name appear first, then
          those with another matching annotation value, and finally those with a matching kind.

          ##### Parameter Priority

          If Conjur is given any combination of optional parameters, it responds with ONLY results
          for the parameter of the highest priority.

          1. `graph`
          2. `all`
          3. `memberships`
          4. `members`
        operationId: "showRole"
        parameters:
        - name: "account"
          in: "path"
          description: "Organization account name"
          required: true
          schema:
            $ref: 'openapi.yml#/components/schemas/AccountName'
        - name: "kind"
          in: "path"
          description: "Type of resource"
          required: true
          example: user
          schema:
            $ref: 'openapi.yml#/components/schemas/Kind'
        - name: "identifier"
          in: "path"
          description: "ID of the role for which to get the information about"
          required: true
          example: "admin"
          schema:
            $ref: 'openapi.yml#/components/schemas/ResourceID'
        - name: "all"
          in: "query"
          description: "Returns an array of Role IDs representing all role memberships, expanded recursively."
          schema:
            type: string
        - name: "memberships"
          in: "query"
          description: "Returns all direct role memberships (members not expanded recursively)."
          schema:
            type: string
        - name: "members"
          in: "query"
          description: "Returns a list of the Role's members."
          schema:
            type: string
        - name: "offset"
          in: "query"
          description: "When listing members, start at this item number."
          schema:
            $ref: 'openapi.yml#/components/schemas/Offset'
        - name: "limit"
          in: "query"
          description: "When listing members, return up to this many results."
          schema:
            $ref: 'openapi.yml#/components/schemas/Limit'
        - name: "count"
          in: "query"
          description: "When listing members, if `true`, return only the count of members."
          schema:
            $ref: 'openapi.yml#/components/schemas/Count'
        - name: "search"
          in: "query"
          description: "When listing members, the results will be narrowed to only those matching the provided string"
          schema:
            type: string
            minLength: 1
            example: "user"
        - name: "graph"
          in: "query"
          description: "If included in the query returns a graph view of the role"
          schema:
            type: string
            example: ''

        responses:
          "200":
            $ref: '#/components/responses/Roles'
          "400":
            $ref: 'openapi.yml#/components/responses/BadRequest'
          "401":
            $ref: 'openapi.yml#/components/responses/UnauthorizedError'
          "403":
            $ref: 'openapi.yml#/components/responses/InadequatePrivileges'
          "404":
            $ref: 'openapi.yml#/components/responses/ResourceNotFound'
          "422":
            $ref: 'openapi.yml#/components/responses/UnprocessableEntity'

        security:
          - conjurAuth: []

      post:
        tags:
        - "roles"
        summary: "Update or modify an existing role membership"
        description: |
          Updates or modifies an existing role membership.

          If a role A is granted to a role B, then role A is said to have role B as a member.
          These relationships are described in the “members” portion of the returned JSON.

          When the `members` query parameter is provided, you will get the members of a role.

          When the `members` and `member` query parameters are provided, the role specfified by
          `member` will be added as a member of the role specified in the endpoint URI.
        operationId: "addMemberToRole"
        parameters:
        - name: "account"
          in: "path"
          description: "Organization account name"
          required: true
          schema:
            $ref: 'openapi.yml#/components/schemas/AccountName'
        - name: "kind"
          in: "path"
          description: "Type of resource"
          required: true
          example: user
          schema:
            $ref: 'openapi.yml#/components/schemas/Kind'
        - name: "identifier"
          in: "path"
          description: "ID of the role for which to get the information about"
          required: true
          example: "admin"
          schema:
            $ref: 'openapi.yml#/components/schemas/ResourceID'
        - name: "members"
          in: "query"
          description: "Returns a list of the Role's members."
          required: true
          schema:
            type: string
        - name: "member"
          in: "query"
          description: "The identifier of the Role to be added as a member."
          required: true
          schema:
            $ref: 'openapi.yml#/components/schemas/RoleType'


        responses:
          "204":
            description: "Member was added to role successfully"
          "400":
            $ref: 'openapi.yml#/components/responses/BadRequest'
          "401":
            $ref: 'openapi.yml#/components/responses/UnauthorizedError'
          "403":
            $ref: 'openapi.yml#/components/responses/InadequatePrivileges'
          "404":
            $ref: 'openapi.yml#/components/responses/ResourceNotFound'
          "422":
            $ref: 'openapi.yml#/components/responses/UnprocessableEntity'

        security:
          - conjurAuth: []

      delete:
        tags:
        - "roles"
        summary: "Deletes an existing role membership"
        description: |
          Deletes an existing role membership.

          If a role A is granted to a role B, then role A is said to have role B as a member.
          These relationships are described in the “members” portion of the returned JSON.

          When the `members` query parameter is provided, you will get the members of a role.

          When the `members` and `member` query parameters are provided, the role specfified by
          `member` will be removed as a member of the role specified in the endpoint URI.
        operationId: "removeMemberFromRole"
        parameters:
        - name: "account"
          in: "path"
          description: "Organization account name"
          required: true
          schema:
            $ref: 'openapi.yml#/components/schemas/AccountName'
        - name: "kind"
          in: "path"
          description: "Type of resource"
          required: true
          example: user
          schema:
            $ref: 'openapi.yml#/components/schemas/Kind'
        - name: "identifier"
          in: "path"
          description: "ID of the role for which to get the information about"
          required: true
          example: "admin"
          schema:
            $ref: 'openapi.yml#/components/schemas/ResourceID'
        - name: "members"
          in: "query"
          description: "Returns a list of the Role's members."
          required: true
          schema:
            type: string
        - name: "member"
          in: "query"
          description: "The identifier of the Role to be added as a member."
          required: true
          schema:
            $ref: 'openapi.yml#/components/schemas/RoleType'


        responses:
          "204":
            description: "Member was deleted from role successfully"
          "400":
            $ref: 'openapi.yml#/components/responses/BadRequest'
          "401":
            $ref: 'openapi.yml#/components/responses/UnauthorizedError'
          "403":
            $ref: 'openapi.yml#/components/responses/InadequatePrivileges'
          "404":
            $ref: 'openapi.yml#/components/responses/ResourceNotFound'
          "422":
            $ref: 'openapi.yml#/components/responses/UnprocessableEntity'

        security:
          - conjurAuth: []
