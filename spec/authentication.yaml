components:
  schemas:
    LoginName:
      type: string
      minLength: 1
      example: "admin"

  paths:
    Login:
      get:
        tags:
        - "authn"
        summary: "Gets the API key of a user given the username and password via HTTP Basic Authentication."
        description: "Passwords are stored in the Conjur database using `bcrypt` with a work factor of 12. Therefore, login is a fairly expensive operation. However, once the API key is obtained, it may be used to inexpensively obtain access tokens by calling the Authenticate method. An access token is required to use most other parts of the Conjur API.


          Your HTTP/REST client probably provides HTTP basic authentication support. For example, curl and all of the Conjur client libraries provide this.


          Note that machine roles (Hosts) do not have passwords and do not need to login."
        operationId: "login"
        parameters:
        - name: "account"
          in: "path"
          description: "Organization account name"
          required: true
          schema:
            $ref: 'openapi.yml#/components/schemas/AccountName'

        responses:
          "200":
            $ref: 'openapi.yml#/components/responses/ApiKey'
          "400":
            $ref: 'openapi.yml#/components/responses/BadRequest'
          "401":
            $ref: 'openapi.yml#/components/responses/UnauthorizedError'
          "422":
            $ref: 'openapi.yml#/components/responses/UnprocessableEntity'
          "500":
            $ref: 'openapi.yml#/components/responses/InternalServerError'

        security:
          - basicAuth: []

    Authenticate:
      post:
        tags:
        - "authn"
        summary: "Gets a short-lived access token, which can be used to authenticate requests to (most of) the rest of the Conjur API."
        description: "A client can obtain an access token by presenting a valid login name and API key.

          The login must be URL encoded. For example, `alice@devops` must be encoded as `alice%40devops`.


          For host authentication, the login is the host ID with the prefix `host/`. For example, the host webserver would login as `host/webserver`, and would be encoded as `host%2Fwebserver`.


          For API usage, the access token is ordinarily passed as an HTTP Authorization `Token` header."
        operationId: "authenticate"
        parameters:
        - name: "account"
          in: "path"
          description: "Organization account name"
          required: true
          schema:
            $ref: 'openapi.yml#/components/schemas/AccountName'
        - name: "login"
          in: "path"
          description: "Login name of the client. For users, it’s the user id. For hosts, the login name is `host/<host-id>`"
          required: true
          schema:
            $ref: '#/components/schemas/LoginName'
        - name: "Accept-Encoding"
          in: "header"
          description: "Setting the Accept-Encoding header to base64 will return a pre-encoded access token"
          schema:
            type: "string"
        requestBody:
          description: "API Key"
          required: true
          content:
            text/plain:
              schema:
                $ref: 'openapi.yml#/components/schemas/ApiKey'

        responses:
          "200":
            $ref: 'openapi.yml#/components/responses/AccessTokenGeneric'
          "400":
            $ref: 'openapi.yml#/components/responses/BadRequest'
          "401":
            $ref: 'openapi.yml#/components/responses/UnauthorizedError'
          "500":
            $ref: 'openapi.yml#/components/responses/InternalServerError'

        security:
          - conjurAuth: []

    ChangePassword:
      put:
        tags:
        - "authn"
        summary: "Changes a user’s password."
        description: "You must provide the login name and current password or API key of the user whose password is to be updated in an HTTP Basic Authentication header. Also replaces the user’s API key with a new securely generated random value. You can fetch the new API key by using Login.


          Your HTTP/REST client probably provides HTTP basic authentication support. For example, curl and all of the Conjur client libraries provide this.


          Note that machine roles (Hosts) do not have passwords. They authenticate using their API keys, while passwords are only used by human users."
        operationId: "setPassword"
        parameters:
        - name: "account"
          in: "path"
          description: "Organization account name"
          required: true
          schema:
            $ref: 'openapi.yml#/components/schemas/AccountName'
        requestBody:
          description: "New password"
          required: true
          content:
            text/plain:
              schema:
                type: string
                format: password
                minLength: 1

        responses:
          "204":
            description: "The password has been changed"
          "400":
            $ref: 'openapi.yml#/components/responses/BadRequest'
          "401":
            $ref: 'openapi.yml#/components/responses/UnauthorizedError'
          "404":
            description: "The user was not found"
          "422":
            $ref: 'openapi.yml#/components/responses/UnprocessableEntity'
          "500":
            $ref: 'openapi.yml#/components/responses/InternalServerError'

        security:
          - basicAuth: []

    RotateApiKey:
      put:
        tags:
        - "authn"
        summary: "Rotates a user’s API key."
        description: "Any role can rotate its own API key. The name and password or current API key of the role must be provided via HTTP Basic Authorization.


          Your HTTP/REST client probably provides HTTP basic authentication support. For example, curl and all of the Conjur client libraries provide this.


          Note that the body of the request must be the empty string."
        operationId: "rotateApiKey"
        parameters:
        - name: "account"
          in: "path"
          description: "Organization account name"
          required: true
          schema:
            $ref: 'openapi.yml#/components/schemas/AccountName'
        - name: "role"
          in: "query"
          description: "(**Optional**) role specifier in `{kind}:{identifier}` format

              ##### Permissions required:
              `update` privilege on the role whose API key is being rotated."
          schema:
            $ref: 'openapi.yml#/components/schemas/Role'

        responses:
          "200":
            $ref: 'openapi.yml#/components/responses/ApiKey'
          "400":
            $ref: 'openapi.yml#/components/responses/BadRequest'
          "401":
            $ref: 'openapi.yml#/components/responses/UnauthorizedError'
          "422":
            $ref: 'openapi.yml#/components/responses/UnprocessableEntity'
          "500":
            $ref: 'openapi.yml#/components/responses/InternalServerError'

        security:
          - basicAuth: []
            conjurAuth: []
