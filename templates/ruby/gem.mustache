=begin
{{> api_info}}
=end

# Common files
require '{{gemName}}/api_client'
require '{{gemName}}/api_error'
require '{{gemName}}/version'
require '{{gemName}}/configuration'
require 'yaml'

# Models
{{#models}}
{{#model}}
require '{{gemName}}/{{modelPackage}}/{{classFilename}}'{{/model}}
{{/models}}

# APIs
{{#apiInfo}}
{{#apis}}
require '{{importPath}}'
{{/apis}}
{{/apiInfo}}

module {{moduleName}}
  class << self
    # Customize default settings for the SDK using block.
    #   {{moduleName}}.configure do |config|
    #     config.username = "xxx"
    #     config.password = "xxx"
    #   end
    # If no block given, return the default Configuration object.
    def configure
      if block_given?
        yield(Configuration.default)
      else
        Configuration.default
      end
    end

    def configure_from_file(filename='~/.conjurrc')
      data = YAML.load(read_file(filename))

      Configuration.default.configure do |conf|
        conf.account ||= data.fetch('account', nil)
        conf.host ||= data.fetch('appliance_url', nil)
        conf.cert_file ||= data.fetch('cert_file', nil)
      end

      if block_given?
        yield(Configuration.default)
      else
        Configuration.default
      end
    end

    def load_identity_from_file(filename='~/conjur.identity')
      identity_regex = /machine (?<machine>\S+)\n {4}login (?<login>\S+)\n {4}password (?<password>\S+)/
      data = read_file(filename)
      match = identity_regex.match data
      if match.nil?
        raise "There was an error while parsing the Conjur idenity file"
      end
      Configuration.default.configure do |conf|
        conf.username ||= match[:login]
        conf.password ||= match[:password]
        conf.host ||= match[:machine]
      end
    end

    def read_file(filename)
      filepath = File.expand_path(filename)
      file = File.open(filepath)
      data = file.read
      file.close()
      return data
    end

    def version
      version = ENV.fetch('CONJUR_VERSION', '5')
      if version.empty?
        5
      else
        version.to_i
      end
    end

    def v5?
      version == 5
    end
  end
end
