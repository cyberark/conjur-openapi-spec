#!/usr/bin/env bash
source bin/util

export REGISTRY_URL=${INFRAPOOL_REGISTRY_URL:-"docker.io"}

print_help(){
  announce "CONJUR OPENAPI DESCRIPTION :: INTEGRATION TESTS"
  cat << EOF
This script tests a Conjur client generated from the OpenAPI
description against a local Conjur instance. The tests can be
run against either the OSS (default) or Enterprise versions
of Conjur.

Currently, testing against Conjur Enterprise is only supported
by Python clients.

USAGE
./bin/test_integration -l <language> [options]

MANDATORY
-l|--language <language>    Specify a client language to test.
                            Testable languages include
                            csharp-netcore and python.

OPTIONS
-e|--enterprise             Run tests against Conjur Enterprise.
-h|--help                   Print help message.
--no-rebuild-conjur         Prevent the script from rebuilding Conjur instance.
                            This option does not maintaing Conjur Enterprise.
       	                    WARNING: may cause failing test cases.
--no-regen-client           Prevent the script from re-generating the client library.
-t|--test <test>            Runs a given test in a client test suite.
EOF
}

cleanup() {
  announce "Cleaning up..."
  bin/stop
}

trap cleanup ERR

enterprise=0
appliance="oss"
enterprise_params=""
docker_network="openapi-spec"

no_regen_client=0
no_rebuid_conjur=0

if [[ "$(tty)" == "not a tty" ]]; then
  sudo_prefix="sudo"
else
  sudo_prefix=""
fi

declare -a supported_langs=("csharp-netcore" "java" "python")
language=""
test=""

while test $# -gt 0
do
  param=$1
  shift
  case "$param" in
    -e|--enterprise)
      enterprise=1
	    appliance="enterprise"
	    docker_network="dap_net"
      ;;
    -h|--help)
      print_help
      exit 0
      ;;
    -l|--language)
      if [[ " ${supported_langs[@]} " =~ " $1 " ]]; then
        language="$1"
      else
        echo "Tests not available for $1!"
        echo "Valid language arguments:"
        printf '  %s\n' "${supported_langs[@]}"
        exit 1
      fi
      shift
      ;;
    --no-rebuild-conjur)
      no_rebuild_conjur=1
      ;;
    --no-regen-client)
      no_regen_client=1
      ;;
    -t|--test)
      test="$1"
      shift
      ;;
    *)
      break
      ;;
  esac
done

if [[ -z "$language" ]]; then
  echo "Missing required --language option"
  echo "Valid language arguments:"
  echo "  csharp-netcore"
  echo "  python"
  exit 1
fi

if [[ $enterprise -eq 1 ]]; then
  if [[ "$language" == "csharp-netcore" ]]; then
    echo "Enterprise tests for C# Conjur client not supported!"
    exit 1
  fi
fi

setup_keycloak(){
  announce "Setting up Keycloak"

  docker compose exec -T oidc-keycloak bash -c "/scripts/create_client"
  docker compose exec -T oidc-keycloak bash -c "/scripts/create_user bob bob bob@conjur.net"
  docker compose exec -T conjur bash -c "/policy/oidc/fetchCertificate"
  KEYCLOAK_CERT="$(docker compose exec conjur cat /etc/ssl/certs/keycloak.pem)"
  export KEYCLOAK_CERT
}

gen_client() {
  announce "Generating $language client"
  if [[ $enterprise -eq 0 ]]; then
    bin/generate_client -l $language 1> /dev/null
  else
    bin/generate_client --enterprise -l $language 1> /dev/null
  fi
}

configure_env() {
  announce "Configuring test environment"

  config/https/generate_csr

  if [[ $no_regen_client -eq 0 ]]; then
    gen_client
  fi

  if [[ $enterprise -eq 0 ]]; then
    bin/get_conjur_admin_key
    setup_keycloak
  fi
}

run_csharp-netcore_tests(){
  if [[ -n "$test" ]]; then
    test_params="--filter \"ClassName=Org.OpenAPITools.Test.$test\""
  fi

  # Overwrite the autogenerated tests with the manually written tests
  $sudo_prefix rm -rf ./out/$appliance/csharp-netcore/src/Org.OpenAPITools.Test/Api
  $sudo_prefix rm -rf ./out/$appliance/csharp-netcore/src/Org.OpenAPITools.Test/Model
  $sudo_prefix cp -r ./test/csharp-netcore/* ./out/$appliance/csharp-netcore/src/Org.OpenAPITools.Test/

  docker run --rm --network $docker_network \
    -v ${PWD}/out/${appliance}/csharp-netcore:/src \
	-e CONJUR_HTTP_APPLIANCE_URL=http://conjur \
    -e CONJUR_HTTPS_APPLIANCE_URL=https://conjur-https \
    -e CONJUR_ACCOUNT=dev \
    -e CONJUR_AUTHN_LOGIN=admin \
    -e CONJUR_CA_BUNDLE=/opt/conjur-openapi-spec/config/https/ca.crt \
    --env-file .env \
	-w /src \
	mcr.microsoft.com/dotnet/sdk:2.1 \
    bash -c "dotnet test $test_params"
}

run_python_tests(){
  if [[ -n "$test" ]]; then
    test_params="python.$test"
  else
    test_params="python"
  fi

  if [[ $enterprise -eq 0 ]]; then
    docker compose build test-python

    announce "Running Python Integration Tests"
    docker compose run \
      --rm \
      --no-deps \
      --env KEYCLOAK_CERT \
      test-python \
      nose2 --plugin nose2.plugins.junitxml --with-coverage --coverage-report xml -X -v -s test "${test_params}"
  else
    docker build -f test/Dockerfile.python -t python-tests --build-arg APPLIANCE=enterprise .

    docker run --rm $enterprise_params \
      --network $docker_network \
      --env KEYCLOAK_CERT \
      --env-file .env \
      python-tests bash -c "nose2 -v -s test ${test_params}"
  fi
}

if [[ $no_rebuild_conjur -eq 0 ||
( $(conjur_alive) -eq 1 && $enterprise -eq 0 ) ||
( $(enterprise_alive) -eq 1 && $enterprise -eq 1 ) ]]; then
  if [[ $enterprise -eq 0 ]]; then
	announce "Starting Conjur OSS"
	bin/start_conjur
  else
    announce "Starting Conjur Enterprise"
	  bin/start_enterprise

    pushd ./test/conjur-intro
    # Create the parameter to import volumes from the Enterprise container so we have its certificates
    for name in $(docker compose ps -q)
    do
        enterprise_params+="--volumes-from $name "
    done
    popd
  fi
fi

configure_env
eval run_${language}_tests
