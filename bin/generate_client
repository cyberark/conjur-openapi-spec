#!/usr/bin/env bash
source bin/util
set -euo pipefail

print_help(){
  announce "CONJUR OPENAPI DESCRIPTION :: CLIENT GENERATION"
  cat << EOF
Uses the OpenAPI Generator to create a client for the API spec.
Can generate clients for Conjur OSS (default) or Enterprise.
Clients are output to ./out/<oss|enterprise>/<language> by default.

USAGE
./bin/generate_client -l <language> [options]

MANDATORY
-l|--language <language>    Specify a client language

OPTIONS
-e|--enterprise             Generate client for Conjur Enterprise
-h|--help                   Print help message
-n|--no-sub-dir             Generated clients output directly to ./out
-o|--output <dir>           Specify an output directory
-u|--update                 Update, instead of replace, the output directory
EOF
}

generator_version="latest-release" # v7.0.1 as of 29 Sept 2023
GENERATOR_IMAGE="openapitools/openapi-generator-cli:$generator_version"

client_lang=""
appliance="oss"
output_volume=""
enterprise=0
given_out_dir=0
make_client_dir=1
update_out_dir=0

while test $# -gt 0
do
  param=$1
  shift
  case "$param" in
    -e|--enterprise)
      enterprise=1
      appliance="enterprise"
      input_dir='out/enterprise/spec'
      output_dir='/out/enterprise'
      ;;
    -h|--help)
      print_help
      exit 0
      ;;
    -l|--language)
      client_lang=$1

      if [[ ${client_lang:0:1} == "-" ]]; then
        echo "Option --language requires specifying argument"
        echo "Usage: ./bin/generate_client -l <language> [options]"
        exit 1
      fi

      shift
      ;;
    -n|--no-sub-dir)
      make_client_dir=0
      ;;
    -o|--output)
      output_volume=$1

      if [[ ${output_volume:0:1} == "-" ]]; then
        echo "Option --output requires specifying argument"
        echo "Usage: ./bin/generate_client -l <language> -o <dir>"
        exit 1
      fi

      given_out_dir=1
      if [ ${output_volume:0:2} == "./" ]; then
        output_volume=${PWD}/${output_volume#*./}
      elif [ ${output_volume:0:1} != "/" ]; then
        output_volume=${PWD}/${output_volume}
      fi
      shift
      ;;
    -u|--update)
      update_out_dir=1
      ;;
    *)
      break
      ;;
  esac
done

if [[ -z $client_lang ]]; then
  echo "Missing required --language option"
  echo "Usage: ./bin/generate_client -l <language> [options]"
  exit 1
fi

input_dir="out/$appliance/spec"
if [ $given_out_dir -eq 0 ]; then
  if [ $make_client_dir -eq 0 ]; then
    output_volume="${PWD}/out/"
  else
    output_volume="${PWD}/out/$appliance/$client_lang/"
  fi
fi

if [ -d $output_volume ] && [ $update_out_dir -eq 0 ]; then
  echo "Removing old client dir..."
  rm -rf $output_volume
  mkdir -p $output_volume
fi

# if templates for a language exist we use them for generation
template_dir="templates/$client_lang"
if [ -e $template_dir ]; then
  template_arg="-t /local/$template_dir"
else
  template_arg=""
fi

# Check if there is a configuration file available for this language
if [ -e "./spec/config/$client_lang.yml" ]; then
  client_config="-c /local/spec/config/$client_lang.yml"
else
  client_config=""
fi

bin/transform --$appliance

echo "Pulling latest release $GENERATOR_IMAGE..."
docker pull "$GENERATOR_IMAGE"

echo "Generating $client_lang client..."
docker run --rm \
  -v ${PWD}:/local \
  -v $output_volume:/out \
  "$GENERATOR_IMAGE" generate \
    -i "/local/$input_dir/openapi.yml" \
    -g "$client_lang" \
    -o "/out/" \
    $client_config \
    $template_arg

echo "Done! Client is in $output_volume folder!"
