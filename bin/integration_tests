#!/bin/bash -e

source bin/util

declare -a tests
no_regen_client=0
no_rebuild_conjur=0

cleanup() {
  echo "Cleaning up..."
  docker-compose rm --stop --force -v
}

conjur_container_alive(){
  if [ -z `docker-compose ps -q conjur` ]; then
    echo 1
  elif [ -z `docker ps -q --no-trunc | grep $(docker-compose ps -q conjur)` ]; then
    echo 1
  else
    echo 0
  fi
}

print_help(){
  echo "Usage: ./bin/integration_tests [--<client> [test-specifier]] [--no-rebuild-conjur] [--no-regen-client]"
  echo
  echo "\tRunning this script without parameters will run ALL integration tests"
  echo "\tIn order to specify a subset of tests you can use a client flag (e.g. --python)"
  echo "\tYou can also specify a subset of client tests by including a parameter after the client flag"
  echo
  echo "\tThe --no-rebuild-conjur flag will prevent the conjur image from rebuilding"
  echo "\t\tWarning: this may cause some tests to fail"
  echo
  echo "\tThe --no-regen-client flag will prevent the client from re-generating before tests run"
  echo
  echo "\tThe -d flag will turn on debug mode for the integration test runs"
}

run_python_tests(){
  if [ $no_regen_client -eq 0 ]; then
    announce "Generating Python Client"
    bin/generate_client python
  fi

  docker-compose build test-python

  if [[ "$DEBUG" == "true" ]]; then
    docker-compose exec test-python bash
    exit
  fi

  if [[ "$1" == "" ]]; then
    test_params="python"
  else
    test_params="python.$1"
  fi

  announce "Running Python Integration Tests"
  docker-compose run \
    --rm \
    --no-deps \
    test-python \
    nose2 --plugin nose2.plugins.junitxml --with-coverage --coverage-report xml -X -v -s test ${test_params}
}

# if there are no parameters specified run all tests
if [[ $# == 0 ]] || [[ $# == 1 && $1 == '--no-rebuild-conjur' ]]; then
  tests+="run_python_tests"
fi

while test $# -gt 0
do
  param=$1
  shift
  case "$param" in
    -d)
      DEBUG="true"
      ;;
    --python)
      if [[ "$1" = "--"* || "$1" == "" ]]; then
        tests+="run_python_tests"
      else
        tests+="run_python_tests $1"
        shift
      fi
      ;;
    -h|--help)
      print_help
      exit 0
      ;;
    --no-rebuild-conjur)
      no_rebuild_conjur=1
      ;;
    --no-regen-client)
      no_regen_client=1
      ;;
    *)
      break
      ;;
  esac
done


if [ $no_rebuild_conjur -eq 0 ] || [ "$(conjur_container_alive)" = "0" ]; then
  announce "Starting Conjur Container"
  bin/start_conjur
fi

announce "Configuring Test Environment"
bin/get_conjur_admin_key
config/https/generate_csr

for i in "${tests[@]}"
do
  eval $i
done
