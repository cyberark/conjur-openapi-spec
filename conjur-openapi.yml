openapi: "3.0.0"

info:
  description: "This is an API definition for CyberArk DAP (part of AAM) and Conjur OSS v10+. You can find out more at [Conjur](https://www.conjur.org/) and [AAM](https://www.cyberark.com/products/privileged-account-security-solution/application-access-manager/) pages."
  version: "0.0.1"
  title: "Conjur"
  contact:
    email: "conj_maintainers@cyberark.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

tags:
- name: "authn"
  description: "Authentication"
- name: "secrets"
  description: "Secrets"
- name: "policies"
  description: "Policies"
- name: "roles"
  description: "RBAC"
- name: "host factory"
  description: "Host factories"
- name: "public keys"
  description: "SSH keys"
  
components:
  schemas:
    AccessToken:
      type: object
      properties:
        protected:
          type: string
        payload:
          type: string
        signature:
          type: string

    AccountName:
      type: string
      minLength: 1
      example: "myorg"

    CheckPrivilege:
      type: boolean
      example: "true"
      description: "Checks whether a role has a privilege on a resource."

    CreateHostRequest:
      type: object
      properties:
        id:
          description: "Identifier of the host to be created. It will be created within the account of the host factory."
          type: string
          example: "my-new-host"

        annotations:
          description: "Annotations to apply to the new host"
          type: object
          example: '{"puppet": "true", "description": "new db host"}'

      required:
        - id

    Count:
      description: "Return only the count of results"
      type: boolean
      example: true

    HostFactoryToken:
      type: string
      minLength: 1

    HostFactoryTokenRequest:
      type: object
      properties:
        expiration:
          description: "`ISO 8601 datetime` denoting a requested expiration time."
          type: string
          example: "2017-08-04T22:27:20+00:00"

        host_factory:
          description: "Fully qualified host factory ID"
          type: string
          example: "myorg:host_factory:hf-db"

        count:
          description: "Number of host tokens to create"
          type: integer
          example: "2"

        cidr:
          # TODO: Find out if we accept string or an array
          description: "Number of host tokens to create"
          type: array
          items:
            type: string
          example: "127.0.0.1/32"

      required:
        - expiration
        - host_factory

    Kind:
      type: string
      minLength: 1
      example: "variable"

    Limit:
      description: "Return no more than this number of results"
      type: integer
      example: 10

    LoginName:
      type: string
      minLength: 1
      example: "admin"

    Offset:
      description: "Skips this many items before returning the rest"
      type: integer
      example: 20

    PermittedRoles:
      type: boolean
      example: "true"

    Policy:
      type: string
      minLength: 1
      example: |
        - !policy
          id: database
          body:
          - !host
            id: db-host
          - !variable
            id: db-password
            owner: !host db-host

    PrivilegeLevel:
      type: string
      minLength: 1
      example: "execute"
      description: "Denotes a type of permission allowed on a resource"

    ResourceID:
      type: string
      minLength: 1
      example: "prod%2Faws%2Fdb-password"
      description: "Resource identifier. Requires to be encoded when in path.

        ##### Examples:

        - `myapp-01` -> `myapp-01` (unchanged)

        - `alice@devops` -> `alice%40devops`

        - `prod/aws/db-password` -> `prod%2Faws%2Fdb-password`

        - `research+development` -> `research%2Bdevelopment`

        - `sales&marketing` -> `sales%26marketing`"

    ResourceIDs:
      type: string
      minLength: 1
      example: myorg:variable:secret1,myorg:variable:secret1
      description: "Comma-delimited, URL-encoded resource identifiers.

        ##### Resources IDs encoding:

        - `myapp-01` -> `myapp-01` (unchanged)

        - `alice@devops` -> `alice%40devops`

        - `prod/aws/db-password` -> `prod%2Faws%2Fdb-password`

        - `research+development` -> `research%2Bdevelopment`

        - `sales&marketing` -> `sales%26marketing`

        ##### Example

        `myorg:variable:secret1,myorg:variable:secret1`"

    ResourceVersion:
      description: "Version of the resource (Conjur keeps the last 20 versions of a secret)"
      type: integer

    Role:
      type: string
      minLength: 1
      description: "##### Kinds of roles:

        - User: one unique wonderful human

        - Host: a single logical machine (in the broad sense, not just physical)

        - Layer: a collection of hosts that have the same privileges

        - Group: a collection of users and groups that have the same privileges
 
        - Policy: a role which owns of a set of related object


        Any identifier included in the URL must be URL-encoded to be recognized by the Conjur API.

        ##### Resource Identifiers:

        - `myapp-01` -> `myapp-01` (unchanged)

        - `alice@devops` -> `alice%40devops`

        - `prod/aws/db-password` -> `prod%2Faws%2Fdb-password`

        - `research+development` -> `research%2Bdevelopment`

        - `sales&marketing` -> `sales%26marketing`"

    SearchFilter:
      type: string
      minLength: 1
      description: "Only returns results that contain this string value"

    ApiKey:
      type: string
      minLength: 55
      description: "Example of a Conjur API key"
      example: "14m9cf91wfsesv1kkhevg12cdywm2wvqy6s8sk53z1ngtazp1t9tykc"

  responses:
    AccessToken:
      description: "The response body is the access token"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AccessToken'
    ApiKey:
      description: "The response body is the API key"
      content:
        text/plain:
          schema:
            type: string
            example: '14m9cf91wfsesv1kkhevg12cdywm2wvqy6s8sk53z1ngtazp1t9tykc'
    Busy:
      description: "Similar operation already in progress, retry after a delay"
    InadequatePrivileges:
      description: "The authenticated user lacks the necessary privileges"
    MissingOrBadRequestParameters:
      description: "A request parameter was missing or invalid"
    PermissionCheckSuccess:
      description: "Permissions check was successful"
    PublicKeys:
      description: "Public keys for a resource as newline delimited string for compatibility with the authorized_keys SSH format. Empty string if the resource does not exist"
      content:
        text/plain:
          schema:
            type: string
    ResourceNotFound:
      description: "The requested resource does not exist, the authenticated user lacks the required privileges to enumerate this resource, or its value has not been set"
    ResourcesNotFound:
      description: "At least one resource was unable to be found"
    SecretValue:
      description: "The secret value was added successfully"
      content:
        text/plain:
          schema:
            type: string
            example: 'supersecret'
    # There might be a better way to display the schema of SecretBatchValue however the json keys are dynamic depending on the secrets you fetched in the 'secrets_id' query param.
    SecretBatchValue:
      description: "The batch secret values"
      content:
        application/json:
          schema:
            type: object
            example: |
              {
                 "myorg:variable:secret1": "secret1Value",
                 "myorg:variable:secret2": "secret2Value"
              }
    UnauthorizedError:
      description: "Authentication information is missing or invalid"
      headers:
        WWW_Authenticate:
          schema:
            type: string

  securitySchemes:
    basicAuth:
      description: "Basic authentication"
      type: http
      scheme: basic
    conjurAuth:
      description: "Conjur access token in `Token token=<base64_encoded_token>` format"
      type: apiKey
      in: header
      name: Authorization
security:
  - basicAuth: []
  - conjurAuth: []
  
paths:
  '/authn/{account}/login':
    get:
      tags:
      - "authn"
      summary: "Gets the API key of a user given the username and password via HTTP Basic Authentication."
      description: "Passwords are stored in the Conjur database using `bcrypt` with a work factor of 12. Therefore, login is a fairly expensive operation. However, once the API key is obtained, it may be used to inexpensively obtain access tokens by calling the Authenticate method. An access token is required to use most other parts of the Conjur API.


        Your HTTP/REST client probably provides HTTP basic authentication support. For example, curl and all of the Conjur client libraries provide this.


        Note that machine roles (Hosts) do not have passwords and do not need to login."
      operationId: "login"
      parameters:
      - name: "account"
        in: "path"
        description: "Organization account name"
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
      responses:
        200:
          $ref: '#/components/responses/ApiKey'
        401:
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basicAuth: []

  '/authn/{account}/{login}/authenticate':
    post:
      tags:
      - "authn"
      summary: "Gets a short-lived access token, which can be used to authenticate requests to (most of) the rest of the Conjur API."
      description: "A client can obtain an access token by presenting a valid login name and API key.

        The login must be URL encoded. For example, `alice@devops` must be encoded as `alice%40devops`.


        For host authentication, the login is the host ID with the prefix `host/`. For example, the host webserver would login as `host/webserver`, and would be encoded as `host%2Fwebserver`.


        For API usage, the access token is ordinarily passed as an HTTP Authorization `Token` header."
      operationId: "authenticate"
      parameters:
      - name: "account"
        in: "path"
        description: "Organization account name"
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
      - name: "login"
        in: "path"
        description: "Login name of the client. For users, it’s the user id. For hosts, the login name is `host/<host-id>`"
        required: true
        schema:
          $ref: '#/components/schemas/LoginName'
      requestBody:
        description: "API Key"
        required: true
        content:
          text/plain:
            schema:
              $ref: '#/components/schemas/ApiKey'
      responses:
        200:
          $ref: '#/components/responses/AccessToken'
        401:
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - conjurAuth: []

  '/authn/{account}/password':
    put:
      tags:
      - "authn"
      summary: "Changes a user’s password."
      description: "You must provide the login name and current password or API key of the user whose password is to be updated in an HTTP Basic Authentication header. Also replaces the user’s API key with a new securely generated random value. You can fetch the new API key by using Login.


        Your HTTP/REST client probably provides HTTP basic authentication support. For example, curl and all of the Conjur client libraries provide this.


        Note that machine roles (Hosts) do not have passwords. They authenticate using their API keys, while passwords are only used by human users."
      operationId: "setPassword"
      parameters:
      - name: "account"
        in: "path"
        description: "Organization account name"
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
      requestBody:
        description: "New password"
        required: true
        content:
          text/plain:
            schema:
              type: string
              format: password
              minLength: 1

      responses:
        204:
          description: "The password has been changed"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          description: "The user was not found"
        422:
          $ref: '#/components/responses/MissingOrBadRequestParameters'
      security:
        - basicAuth: []

  '/authn/{account}/api_key':
    put:
      tags:
      - "authn"
      summary: "Rotates a user’s API key."
      description: "Any role can rotate its own API key. The name and password or current API key of the role must be provided via HTTP Basic Authorization.


        Your HTTP/REST client probably provides HTTP basic authentication support. For example, curl and all of the Conjur client libraries provide this.


        Note that the body of the request must be the empty string."
      operationId: "rotateApiKey"
      parameters:
      - name: "account"
        in: "path"
        description: "Organization account name"
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
      - name: "role"
        in: "query"
        description: "(**Optional**) role specifier in `{kind}:{identifier}` format

          ##### Permissions required

          `update` privilege on the role whose API key is being rotated."
        schema:
          $ref: '#/components/schemas/Role'

      responses:
        200:
          $ref: '#/components/responses/ApiKey'
        401:
          $ref: '#/components/responses/UnauthorizedError'
      security:
        - basicAuth: []

# ========== SECRETS ==========

  '/secrets/{account}/{kind}/{identifier}':
    post:
      tags:
      - "secrets"
      summary: "Creates a secret value within the specified variable."
      description: "Creates a secret value within the specified Variable.


        Note: Conjur will allow you to add a secret to any resource, but the best practice is to store and retrieve secret data only using Variable resources."
      operationId: "createVariable"
      parameters:
      - name: "account"
        in: "path"
        description: "Organization account name"
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
      - name: "kind"
        in: "path"
        description: "Type of resource - in almost all cases this should be `variable`"
        required: true
        schema:
          $ref: '#/components/schemas/Kind'
      - name: "identifier"
        in: "path"
        description: "URL-encoded variable ID"
        required: true
        schema:
          $ref: '#/components/schemas/ResourceID'
      requestBody:
        description: "Secret data"
        required: true
        content:
          text/plain:
            schema:
              type: string
              format: binary

      responses:
        201:
          description: "The secret value was added successfully"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/InadequatePrivileges'
        422:
          $ref: '#/components/responses/MissingOrBadRequestParameters'

      security:
        - conjurAuth: []

    get:
      tags:
      - "secrets"
      summary: "Fetches the value of a secret from the specified Variable."
      description: "Fetches the value of a secret from the specified Variable. The latest version will be retrieved unless the version parameter is specified. The twenty most recent secret versions are retained.


        The secret data is returned in the response body.


        Note: Conjur will allow you to add a secret to any resource, but the best practice is to store and retrieve secret data only using Variable resources."
      operationId: "getVariable"
      parameters:
      - name: "account"
        in: "path"
        description: "Organization account name"
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
      - name: "kind"
        in: "path"
        description: "Type of resource - in almost all cases this should be `variable`"
        required: true
        schema:
          $ref: '#/components/schemas/Kind'
      - name: "identifier"
        in: "path"
        description: "URL-encoded variable ID"
        required: true
        schema:
          $ref: '#/components/schemas/ResourceID'
      - name: "version"
        in: "query"
        description: "(**Optional**) Version you want to retrieve (Conjur keeps the last 20 versions of a secret)"
        schema:
          $ref: '#/components/schemas/ResourceVersion'

      responses:
        200:
          $ref: '#/components/responses/SecretValue'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/InadequatePrivileges'
        404:
          $ref: '#/components/responses/ResourceNotFound'
        422:
          $ref: '#/components/responses/MissingOrBadRequestParameters'

      security:
        - conjurAuth: []

  '/secrets':
    get:
      tags:
      - "secrets"
      summary: "Fetch multiple secrets"
      description: "Fetches multiple secret values in one invocation. It’s faster to fetch secrets in batches than to fetch them one at a time."
      operationId: "getVariables"
      parameters:
      - name: "variable_ids"
        in: "query"
        description: "Comma-delimited, URL-encoded resource IDs of the variables."
        required: true
        schema:
          $ref: '#/components/schemas/ResourceIDs'

      responses:
        200:
          $ref: '#/components/responses/SecretBatchValue'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/InadequatePrivileges'
        404:
          $ref: '#/components/responses/ResourcesNotFound'
        422:
          $ref: '#/components/responses/MissingOrBadRequestParameters'

      security:
        - conjurAuth: []

# ========== POLICIES ==========

  '/policies/{account}/policy/{identifier}':
    put:
      tags:
      - "policies"
      summary: "Loads or replaces a Conjur policy document."
      description: "Loads or replaces a Conjur policy document.


        **Any policy data which already exists on the server but is not explicitly specified in the new policy file will be deleted!**."
      operationId: "loadPolicy"
      parameters:
      - name: "account"
        in: "path"
        description: "Organization account name"
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
      - name: "identifier"
        in: "path"
        description: "ID of the policy to load (root if no root policy has been loaded yet)"
        required: true
        example: "root"
        schema:
          $ref: '#/components/schemas/ResourceID'
      requestBody:
        description: "Policy"
        required: true
        content:
          # TODO: Figure out what type YAML is in MIME convention
          text/yaml:
            schema:
              $ref: '#/components/schemas/Policy'
          text/x-yaml:
            schema:
              $ref: '#/components/schemas/Policy'
          application/x-yaml:
            schema:
              $ref: '#/components/schemas/Policy'
          text/plain:
            schema:
              $ref: '#/components/schemas/Policy'

      responses:
        201:
          description: "The policy was loaded or replaced successfully"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/InadequatePrivileges'
        404:
          $ref: '#/components/responses/ResourceNotFound'
        409:
          $ref: '#/components/responses/Busy'
        422:
          $ref: '#/components/responses/MissingOrBadRequestParameters'

      security:
        - conjurAuth: []

    post:
      tags:
      - "policies"
      summary: "Adds data to the existing Conjur policy."
      description: "Adds data to the existing Conjur policy. Deletions are not allowed. Any policy objects that exist on the server but are omitted from the policy file will not be deleted and any explicit deletions in the policy file will result in an error.

        ##### Permissions required

        `create` privilege on the policy."
      operationId: "updatePolicy"
      parameters:
      - name: "account"
        in: "path"
        description: "Organization account name"
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
      - name: "identifier"
        in: "path"
        description: "ID of the policy to update"
        required: true
        example: "root"
        schema:
          $ref: '#/components/schemas/ResourceID'
      requestBody:
        description: "Policy"
        required: true
        content:
          # TODO: Figure out what type YAML is in MIME convention
          text/yaml:
            schema:
              $ref: '#/components/schemas/Policy'
          text/x-yaml:
            schema:
              $ref: '#/components/schemas/Policy'
          application/x-yaml:
            schema:
              $ref: '#/components/schemas/Policy'
          text/plain:
            schema:
              $ref: '#/components/schemas/Policy'

      responses:
        201:
          description: "The policy was extended successfully"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/InadequatePrivileges'
        404:
          $ref: '#/components/responses/ResourceNotFound'
        409:
          $ref: '#/components/responses/Busy'
        422:
          $ref: '#/components/responses/MissingOrBadRequestParameters'

      security:
        - conjurAuth: []

    patch:
      tags:
      - "policies"
      summary: "Modifies an existing Conjur policy."
      description: "Modifies an existing Conjur policy. Data may be explicitly deleted using the `!delete`, `!revoke`, and `!deny` statements. Unlike `replace` mode, no data is ever implicitly deleted.


        ##### Permissions required

        `create` privilege on the policy."
      operationId: "modifyPolicy"
      parameters:
      - name: "account"
        in: "path"
        description: "Organization account name"
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
      - name: "identifier"
        in: "path"
        description: "ID of the policy to update"
        required: true
        example: "root"
        schema:
          $ref: '#/components/schemas/ResourceID'
      requestBody:
        description: "Policy"
        required: true
        content:
          # TODO: Figure out what type YAML is in MIME convention
          text/yaml:
            schema:
              $ref: '#/components/schemas/Policy'
          text/x-yaml:
            schema:
              $ref: '#/components/schemas/Policy'
          application/x-yaml:
            schema:
              $ref: '#/components/schemas/Policy'
          text/plain:
            schema:
              $ref: '#/components/schemas/Policy'

      responses:
        201:
          description: "The policy was updated successfully"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/InadequatePrivileges'
        404:
          $ref: '#/components/responses/ResourceNotFound'
        409:
          $ref: '#/components/responses/Busy'
        422:
          $ref: '#/components/responses/MissingOrBadRequestParameters'

      security:
        - conjurAuth: []

# ========== Roles ==========

  '/roles/{account}/{kind}/{identifier}':
    get:
      tags:
      - "roles"
      summary: "Get role information"
      description: "Gets detailed information about a specific role, including the role members.


        If a role A is granted to a role B, then role A is said to have role B as a member. These relationships are described in the “members” portion of the returned JSON.


        ##### Listing members


        If `members` is provided, you will get the members of a role.


        If a `kind` query parameter is given, narrows results to only resources of that kind.


        If a `limit` is given, returns no more than that number of results. Providing an `offset` skips a number of resources before returning the rest. In addition, providing an `offset` will give limit a default value of 10 if none other is provided. These two parameters can be combined to page through results.


        If the parameter `count` is true, returns only the number of items in the list.


        ##### Text search


        If the search parameter is provided, narrows results to those pertaining to the search query. Search works across resource IDs and the values of annotations. It weights results so that those with matching id or a matching value of an annotation called name appear first, then those with another matching annotation value, and finally those with a matching kind.
        "
      operationId: "getRole"
      parameters:
      - name: "account"
        in: "path"
        description: "Organization account name"
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
      - name: "kind"
        in: "path"
        description: "Type of resource"
        required: true
        example: user
        schema:
          $ref: '#/components/schemas/Kind'
      - name: "identifier"
        in: "path"
        description: "ID of the role for which to get the information about"
        required: true
        example: "admin"
        schema:
          $ref: '#/components/schemas/ResourceID'
      - name: "members"
        in: "query"
        description: "Comma-delimited, URL-encoded resource IDs of the variables."
        schema:
          type: boolean
          example: false
      - name: "offset"
        in: "query"
        description: "When listing members, start at this item number."
        schema:
          $ref: '#/components/schemas/Offset'
      - name: "limit"
        in: "query"
        description: "When listing members, return up to this many results."
        schema:
          $ref: '#/components/schemas/Limit'
      - name: "count"
        in: "query"
        description: "When listing members, if `true`, return only the count of members."
        schema:
          $ref: '#/components/schemas/Count'

      responses:
        201:
          description: "The response body contains the requested role(s)/member(s)"
          content:
            application/json: {}
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/InadequatePrivileges'
        404:
          $ref: '#/components/responses/ResourceNotFound'

      security:
        - conjurAuth: []

# ========== Resources ==========

  '/resources/{account}':
    get:
      tags:
      - "resources"
      summary: "Lists resources within an organization account."
      description: "Lists resources within an organization account.


      If a `kind` query parameter is given, narrows results to only resources of that kind.


      If a `limit` is given, returns no more than that number of results. Providing an `offset` skips a number of resources before returning the rest. In addition, providing an `offset` will give `limit` a default value of 10 if none other is provided. These two parameters can be combined to page through results.


      If the parameter `count` is `true`, returns only the number of items in the list.


      ##### Text search


      If the `search` parameter is provided, narrows results to those pertaining to the search query. Search works across resource IDs and the values of annotations. It weighs results so that those with matching id or a matching value of an annotation called `name` appear first, then those with another matching annotation value, and finally those with a matching  `kind`."
      operationId: "getResources"
      parameters:
      - name: "account"
        in: "path"
        description: "Organization account name"
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
      - name: "kind"
        in: "query"
        description: "Type of resource"
        example: user
        schema:
          $ref: '#/components/schemas/Kind'
      - name: "search"
        in: "query"
        description: "Filter resources based on this value by name"
        example: "db"
        schema:
          $ref: '#/components/schemas/SearchFilter'
      - name: "offset"
        in: "query"
        description: "When listing resources, start at this item number."
        schema:
          $ref: '#/components/schemas/Offset'
      - name: "limit"
        in: "query"
        description: "When listing resources, return up to this many results."
        schema:
          $ref: '#/components/schemas/Limit'
      - name: "count"
        in: "query"
        description: "When listing resources, if `true`, return only the count of the results."
        schema:
          $ref: '#/components/schemas/Count'

      responses:
        200:
          description: "The response body contains the list of matching resources"
          content:
            application/json: {}
        401:
          $ref: '#/components/responses/UnauthorizedError'

      security:
        - conjurAuth: []

  '/resources/{account}/{kind}/{identifier}':
    get:
      tags:
      - "resources"
      summary: "Shows a description of a single resource."
      description: "Details about a single resource.

      ##### Permissions Required

      `read` privilege on the resource."
      operationId: "getResource"
      parameters:
      - name: "account"
        in: "path"
        description: "Organization account name"
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
      - name: "kind"
        in: "path"
        description: "Type of resource"
        required: true
        example: user
        schema:
          $ref: '#/components/schemas/Kind'
      - name: "identifier"
        in: "path"
        description: "ID of the resource for which to get the information about"
        required: true
        example: "conjur/authn-iam/test"
        schema:
          $ref: '#/components/schemas/ResourceID'
      - name: "permitted_roles"
        in: "query"
        description: "Lists the roles which have the named privilege on a resource."
        schema:
          $ref: '#/components/schemas/PermittedRoles'
      - name: "privilege"
        in: "query"
        description: "Level of privilege to filter on. Can only be used in combination with `permitted_roles` or `check` parameter."
        schema:
          $ref: '#/components/schemas/PrivilegeLevel'
      - name: "check"
        in: "query"
        description: "Check whether a role has a privilege on a resource."
        schema:
          $ref: '#/components/schemas/CheckPrivilege'
      - name: "role"
        in: "query"
        example: myorg:host:host1
        description: "Role to check privilege on. Can only be used in combination with `check` parameter."
        schema:
          $ref: '#/components/schemas/Role'

      responses:
        200:
          description: "The response body contains the list of role memberships or permitted roles"
          content:
            application/json: {}
        204:
          $ref: '#/components/responses/PermissionCheckSuccess'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/InadequatePrivileges'
        404:
          $ref: '#/components/responses/ResourceNotFound'
        422:
          $ref: '#/components/responses/MissingOrBadRequestParameters'
      security:
        - conjurAuth: []

# ========== Host Factory ==========

  '/host_factory_tokens':
    post:
      tags:
      - "host factory"
      summary: "Creates one or more host identity tokens."
      description: "Creates one or more tokens which can be used to bootstrap host identity. Responds with a JSON document containing the tokens and their restrictions.


        If the tokens are created with a CIDR restriction, Conjur will only accept them from the whitelisted IP ranges.


        ##### Permissions required


        `execute` privilege on the Host Factory."
      operationId: "createHostToken"
      requestBody:
        description: "Parameters"
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/HostFactoryTokenRequest'

      responses:
        200:
          description: "Zero or more tokens were created and delivered in the response body"
          content:
            application/json: {}
        403:
          $ref: '#/components/responses/InadequatePrivileges'
        404:
          $ref: '#/components/responses/ResourceNotFound'
        422:
          $ref: '#/components/responses/MissingOrBadRequestParameters'

      security:
        - conjurAuth: []

  '/host_factory_tokens/{token}':
    delete:
      tags:
      - "host factory"
      summary: "Revokes a token, immediately disabling it."
      description: "Revokes a token, immediately disabling it.


        ##### Permissions required


        `update` privilege on the host factory."
      operationId: "revokeHostToken"
      parameters:
      - name: "token"
        in: "path"
        description: "The host factory token to revoke"
        required: true
        schema:
          $ref: '#/components/schemas/HostFactoryToken'
      responses:
        204:
          description: "Token was successfully revoked"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        404:
          $ref: '#/components/responses/ResourceNotFound'

      security:
        - conjurAuth: []

  '/host_factories/hosts':
    post:
      tags:
      - "host factory"
      summary: "Creates a Host using the Host Factory."
      description: "Creates a Host using the Host Factory and returns a JSON description of it.


        Requires a host factory token, which can be created using the create tokens API. In practice, this token is usually provided automatically as part of Conjur integration with your host provisioning infrastructure.


        Note: If the token was created with a CIDR restriction, you must make this API request from a whitelisted address."
      operationId: "createHost"
      requestBody:
        description: "Parameters"
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/CreateHostRequest'
      responses:
        201:
          description: "The response body contains the newly-created host"
          content:
            application/json: {}
        401:
          $ref: '#/components/responses/UnauthorizedError'
        422:
          $ref: '#/components/responses/MissingOrBadRequestParameters'
      security:
        - conjurAuth: []

# ========== Public keys ==========

  '/public_keys/{account}/{kind}/{identifier}':
    get:
      tags:
      - "public keys"
      summary: "Shows all public keys for a resource."
      description: "Shows all public keys for a resource as newline delimited string for compatibility with the authorized_keys SSH format.


        Returns an empty string if the resource does not exist, to prevent attackers from determining whether a resource exists."
      operationId: "showPublicKeys"
      parameters:
      - name: "account"
        in: "path"
        description: "Organization account name"
        required: true
        schema:
          $ref: '#/components/schemas/AccountName'
      - name: "kind"
        in: "path"
        description: "Type of resource"
        required: true
        example: user
        schema:
          $ref: '#/components/schemas/Kind'
      - name: "identifier"
        in: "path"
        description: "ID of the resource for which to get the information about"
        required: true
        example: "admin"
        schema:
          $ref: '#/components/schemas/ResourceID'

      responses:
        200:
          $ref: '#/components/responses/PublicKeys'

# TODO: Inject client cert
# TODO: Seed Service

externalDocs:
  description: "Find out more about Conjur"
  url: "https://conjur.org"
