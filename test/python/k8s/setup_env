#!/usr/bin/env bash

set -e
. test/python/k8s/utils

announce "Setting up test environment"
# Create KinD cluster and local Docker registry
# Check if KinD cluster has already been created
if [ "$(kind get clusters | grep "^$KIND_CLUSTER_NAME$")" = "$KIND_CLUSTER_NAME" ]; then
    echo "KinD cluster '$KIND_CLUSTER_NAME' already exists. Skipping cluster creation."
    if [ "$(registry_container_is_running)" != "true" ]; then
        echo "KinD cluster '$KIND_CLUSTER_NAME' does not have an internal Docker registry running"
        echo "and 'USE_DOCKER_LOCAL_REGISTRY' is set to 'true'. To use an"
        echo "internal Docker registry, please delete the KinD cluster:"
        echo "    kind delete cluster --name $KIND_CLUSTER_NAME"
        echo "and restart the demo scripts to create a new KinD cluster."
        exit 1
    fi
else
    announce "Creating KinD Cluster with local registry"

    reg_name="$DOCKER_REG_NAME"
    reg_port="$DOCKER_REG_PORT"

    # create registry container unless it already exists
    if [ "$(registry_container_is_running)" != "true" ]; then
        echo "Creating a registry container"
        # Create a Docker network named 'kind' if not already created
        docker network inspect kind >/dev/null 2>&1 || \
            docker network create kind
        docker run \
            -d --restart=always -p "${reg_port}:${reg_port}" --name "${reg_name}" --net=kind \
            registry:2
    fi
    reg_ip="$(docker inspect -f '{{.NetworkSettings.Networks.kind.IPAddress}}' "${reg_name}")"

    # create a cluster with the local registry enabled in containerd
    cat <<EOF | kind create cluster --name "${KIND_CLUSTER_NAME}" --config=-
kind: Cluster
apiVersion: kind.x-k8s.io/v1alpha4
containerdConfigPatches:
- |-
  [plugins."io.containerd.grpc.v1.cri".registry.mirrors."localhost:${reg_port}"]
    endpoint = ["http://${reg_ip}:${reg_port}"]
EOF

fi

# Helm install Conjur
if has_namespace "$CONJUR_NAMESPACE"; then
    echo "Namespace '$CONJUR_NAMESPACE' exists, not going to create it."
else
    kubectl create ns "$CONJUR_NAMESPACE"
fi

if [ "$(helm list -q -n $CONJUR_NAMESPACE | grep "^$HELM_RELEASE$")" = "$HELM_RELEASE" ]; then
    echo "Helm upgrading existing Conjur cluster. Waiting for upgrade to complete."
    helm upgrade \
        -n "$CONJUR_NAMESPACE" \
        --set account.name="$CONJUR_ACCOUNT" \
        --set account.create="true" \
        --set authenticators="authn\,authn-k8s/$AUTHENTICATOR_ID" \
        --set logLevel="$CONJUR_LOG_LEVEL" \
        --set service.external.enabled="false" \
        --reuse-values \
        --wait \
        --timeout 300s \
        "$HELM_RELEASE" \
        "https://github.com/cyberark/conjur-oss-helm-chart/releases/download/v$VERSION/conjur-oss-$VERSION.tgz"
else
    echo "Helm install a Conjur cluster. Waiting for install to complete."
    data_key="$(docker run --rm cyberark/conjur data-key generate)"
    helm install \
        -n "$CONJUR_NAMESPACE" \
        --set dataKey="$data_key" \
        --set account.name="$CONJUR_ACCOUNT" \
        --set account.create="true" \
        --set authenticators="authn\,authn-k8s/$AUTHENTICATOR_ID" \
        --set logLevel="$CONJUR_LOG_LEVEL" \
        --set service.external.enabled="false" \
        --wait \
        --timeout 300s \
        "$HELM_RELEASE" \
        "https://github.com/cyberark/conjur-oss-helm-chart/releases/download/v$VERSION/conjur-oss-$VERSION.tgz"
fi

# Ensure authn-k8s enabled
authenticators="$(kubectl get secret \
                  -n $CONJUR_NAMESPACE \
                  $HELM_RELEASE-conjur-authenticators \
                  --template={{.data.key}} | base64 -d)"
if grep -q "$authenticators" <<< "$AUTHENTICATOR_ID"; then
  echo "Enabling authenticator ID $AUTHENTICATOR_ID for authn-k8s"
  helm upgrade \
       -n "$CONJUR_NAMESPACE" \
       --reuse-values \
       --set authenticators="authn\,authn-k8s/$AUTHENTICATOR_ID" \
       --set logLevel="$CONJUR_LOG_LEVEL" \
       --wait \
       --timeout 300s \
       "$HELM_RELEASE" \
       "https://github.com/cyberark/conjur-oss-helm-chart/releases/download/v$VERSION/conjur-oss-$VERSION.tgz"

else
  echo "Authenticator ID $AUTHENTICATOR_ID is already enabled for authn-k8s"
fi

wait_for_conjur_ready
