=begin
#Conjur

#This is an API definition for CyberArk DAP (part of AAM) and Conjur OSS v10+. You can find out more at [Conjur](https://www.conjur.org/) and [AAM](https://www.cyberark.com/products/privileged-account-security-solution/application-access-manager/) pages.

The version of the OpenAPI document: 0.0.1
Contact: conj_maintainers@cyberark.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::AuthnApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'AuthnApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::AuthnApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AuthnApi' do
    it 'should create an instance of AuthnApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::AuthnApi)
    end
  end

  # unit tests for authenticate
  # Gets a short-lived access token, which can be used to authenticate requests to (most of) the rest of the Conjur API.
  # A client can obtain an access token by presenting a valid login name and API key. The login must be URL encoded. For example, &#x60;alice@devops&#x60; must be encoded as &#x60;alice%40devops&#x60;.  For host authentication, the login is the host ID with the prefix &#x60;host/&#x60;. For example, the host webserver would login as &#x60;host/webserver&#x60;, and would be encoded as &#x60;host%2Fwebserver&#x60;.  For API usage, the access token is ordinarily passed as an HTTP Authorization &#x60;Token&#x60; header.
  # @param account Organization account name
  # @param login Login name of the client. For users, it’s the user id. For hosts, the login name is &#x60;host/&lt;host-id&gt;&#x60;
  # @param body API Key
  # @param [Hash] opts the optional parameters
  # @option opts [String] :accept_encoding Setting the Accept-Encoding header to base64 will return a pre-encoded access token
  # @return [String]
  describe 'authenticate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for login
  # Gets the API key of a user given the username and password via HTTP Basic Authentication.
  # Passwords are stored in the Conjur database using &#x60;bcrypt&#x60; with a work factor of 12. Therefore, login is a fairly expensive operation. However, once the API key is obtained, it may be used to inexpensively obtain access tokens by calling the Authenticate method. An access token is required to use most other parts of the Conjur API.  Your HTTP/REST client probably provides HTTP basic authentication support. For example, curl and all of the Conjur client libraries provide this.  Note that machine roles (Hosts) do not have passwords and do not need to login.
  # @param account Organization account name
  # @param [Hash] opts the optional parameters
  # @return [String]
  describe 'login test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for rotate_api_key
  # Rotates a user’s API key.
  # Any role can rotate its own API key. The name and password or current API key of the role must be provided via HTTP Basic Authorization.  Your HTTP/REST client probably provides HTTP basic authentication support. For example, curl and all of the Conjur client libraries provide this.  Note that the body of the request must be the empty string.
  # @param account Organization account name
  # @param [Hash] opts the optional parameters
  # @option opts [String] :role (**Optional**) role specifier in &#x60;{kind}:{identifier}&#x60; format ##### Permissions required &#x60;update&#x60; privilege on the role whose API key is being rotated.
  # @return [String]
  describe 'rotate_api_key test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for set_password
  # Changes a user’s password.
  # You must provide the login name and current password or API key of the user whose password is to be updated in an HTTP Basic Authentication header. Also replaces the user’s API key with a new securely generated random value. You can fetch the new API key by using Login.  Your HTTP/REST client probably provides HTTP basic authentication support. For example, curl and all of the Conjur client libraries provide this.  Note that machine roles (Hosts) do not have passwords. They authenticate using their API keys, while passwords are only used by human users.
  # @param account Organization account name
  # @param body New password
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'set_password test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
