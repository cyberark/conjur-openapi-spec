/*
 * Conjur
 * This is an API definition for CyberArk Conjur OSS. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.conjur.sdk.api;

import org.conjur.sdk.*;
import org.conjur.sdk.ApiException;
import java.io.File;
import org.junit.Test;
import org.junit.Before;
import org.junit.Ignore;
import org.junit.Assert;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SecretsApi
 */
public class SecretsApiTest extends ConfiguredTest {

    private final SecretsApi api = new SecretsApi();
    private static Map<String, String> defaultSecrets;

    
    @Before
    public void setDefaultSecrets() throws ApiException {
        defaultSecrets = new HashMap<String, String>();
        defaultSecrets.put("testSecret", "testvalue");
        defaultSecrets.put("one/password", "testvalue2");

        for (String identifier : defaultSecrets.keySet()) {
            String secretValue = defaultSecrets.get(identifier);
            api.createSecret(account, "variable", identifier, null, null, secretValue);
        }
    }

    /**
     * Creates a secret value within the specified variable.
     *
     * Creates a secret value within the specified Secret.   Note: Conjur will allow you to add a secret to any resource, but the best practice is to store and retrieve secret data only using Secret resources. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createSecretTest() throws ApiException {
        String kind = "variable";
        String identifier = "testSecret";
        String expirations = null;
        String xRequestId = null;
        ApiResponse<?> response = api.createSecretWithHttpInfo(account, kind, identifier, expirations, xRequestId, defaultSecrets.get(identifier));

        Assert.assertEquals(201, response.getStatusCode());
    }
    
    /**
     * Fetches the value of a secret from the specified Secret.
     *
     * Fetches the value of a secret from the specified Secret. The latest version will be retrieved unless the version parameter is specified. The twenty most recent secret versions are retained.  The secret data is returned in the response body.  Note: Conjur will allow you to add a secret to any resource, but the best practice is to store and retrieve secret data only using Secret resources. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecretTest() throws ApiException {
        String kind = "variable";
        Integer version = null;
        String xRequestId = null;
        String secretValue;
        for (String identifier : defaultSecrets.keySet()) {
            secretValue = defaultSecrets.get(identifier);
            String response = api.getSecret(account, kind, identifier, version, xRequestId);
            Assert.assertEquals(secretValue, response);
        }
    }
    
    /**
     * Fetch multiple secrets
     *
     * Fetches multiple secret values in one invocation. Itâ€™s faster to fetch secrets in batches than to fetch them one at a time.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSecretsTest() throws ApiException {
        String variableIds = "";
        String acceptEncoding = null;
        String xRequestId = null;
        String kind = "variable";
        String nextId;
        List<String> ids = new ArrayList<String>();
        for (String identifier : defaultSecrets.keySet()) {
            nextId = String.format("%s:%s:%s,", account, kind, identifier);
            variableIds = variableIds.concat(nextId);
            ids.add(nextId.substring(0, nextId.length()));
        }

        variableIds = variableIds.substring(0, variableIds.length());
        Map<?, ?> response = (Map<?, ?>)api.getSecrets(variableIds, acceptEncoding, xRequestId);
        for (String identifier : ids) {
            String splitId = identifier.split(":")[2];

            Assert.assertEquals(defaultSecrets.get(splitId), response.get(identifier));
        }
    }   
}
