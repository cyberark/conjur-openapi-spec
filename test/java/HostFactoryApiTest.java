/*
 * Conjur
 * This is an API definition for CyberArk Conjur OSS. You can find out more at [Conjur.org](https://www.conjur.org/).
 *
 * The version of the OpenAPI document: 5.1.0
 * Contact: conj_maintainers@cyberark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.conjur.sdk.api;

import org.conjur.sdk.*;
import org.conjur.sdk.api.*;
import org.conjur.sdk.model.*;

import org.conjur.sdk.ApiException;
import org.conjur.sdk.model.CreateHost;
import org.junit.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.internal.LinkedTreeMap;


/**
 * API tests for HostFactoryApi
 */
public class HostFactoryApiTest extends ConfiguredTest {

    private final HostFactoryApi api = new HostFactoryApi();

    private final String HOST_FACTORY_ID = String.format("%s:host_factory:testFactory", System.getenv("CONJUR_ACCOUNT"));
    private static final String FACTORY_POLICY = String.join("\n",
            "- !layer testLayer",
            "- !host_factory",
            "    id: testFactory",
            "    annotations:",
            "        description: Testing factory",
            "    layers: [ !layer testLayer ]",

            "- !user carl",
            "- !permit",
            "  role: !user carl",
            "  privileges: [ read ]",
            "  resource: !host_factory testFactory"
        );

    @BeforeClass
    public static void setUpClass() throws ApiException {
        ConfiguredTest.setUpClass();
        PoliciesApi policiesApi = new PoliciesApi();
        policiesApi.replacePolicy(System.getenv("CONJUR_ACCOUNT"), "root", FACTORY_POLICY, null);
    }

    public String getHostToken() throws ApiException {
        String expiration = "2100-05-05";
        String hostFactory = HOST_FACTORY_ID;
        List<?> response = api.createToken(expiration, hostFactory, null, null, null);

        LinkedTreeMap result = (LinkedTreeMap) response.get(0);
        return (String)result.get("token");
    }

    /**
     * Creates a Host using the Host Factory.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createHostTest() throws ApiException {
        String token = this.getHostToken();
        String oldApiKey = conjurAuth.getApiKey();
        conjurAuth.setApiKey(String.format("token=\"%s\"", token));

        String id = HOST_FACTORY_ID;
        String xRequestId = null;
        Object annotations = null;

        ApiResponse<?> response = api.createHostWithHttpInfo(id, xRequestId, annotations);
        
        Assert.assertEquals(201, response.getStatusCode());
        conjurAuth.setApiKey(oldApiKey);
    }
    
    /**
     * Creates one or more host identity tokens.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createTokenTest() throws ApiException {
        String expiration = "2100-05-05";
        String hostFactory = HOST_FACTORY_ID;
        String xRequestId = null;
        List<String> cidr = null;
        Integer count = null;
        ApiResponse<List<Object>> response = api.createTokenWithHttpInfo(expiration, hostFactory, xRequestId, cidr, count);

        Assert.assertEquals(200, response.getStatusCode());
    }
    
    /**
     * Revokes a token, immediately disabling it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void revokeTokenTest() throws ApiException {
        String token = this.getHostToken();
        String xRequestId = null;

        ApiResponse<?> response = api.revokeTokenWithHttpInfo(token, xRequestId);
        Assert.assertEquals(204, response.getStatusCode());
    }
    
}
